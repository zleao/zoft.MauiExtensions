<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MainThreadPage_Title" xml:space="preserve">
    <value>Main Thread</value>
  </data>
  <data name="LocalizationPage_ChooseLanguageLabel" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="LocalizationPage_Label1" xml:space="preserve">
    <value>What is Lorem Ipsum?</value>
  </data>
  <data name="LocalizationPage_Label2" xml:space="preserve">
    <value>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</value>
  </data>
  <data name="LocalizationPage_Label3" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean eu odio feugiat, vehicula est sed, tincidunt ante. Nulla eu elementum nulla, sit amet molestie mauris. Vestibulum eu metus leo. Nam volutpat condimentum ipsum, in viverra nisl pulvinar eget. Nullam et feugiat elit. Sed id laoreet tortor. Sed viverra, felis et faucibus pharetra, enim magna bibendum libero, in fermentum arcu erat sed neque. Aenean hendrerit euismod augue vitae pretium. Aenean vulputate dolor eu magna tempor malesuada. Pellentesque nunc nibh, volutpat in finibus a, luctus at libero. Interdum et malesuada fames ac ante ipsum primis in faucibus. Nam in auctor tellus, ut placerat tellus. Praesent auctor diam eget nunc efficitur vulputate. Pellentesque sed urna magna. Aliquam erat volutpat.

Fusce vitae nulla metus. Ut commodo quam eget eros ornare rutrum. Cras commodo tempus felis, efficitur dictum felis tincidunt nec. In consectetur nisl eget lorem consectetur, eget cursus dui porttitor. Sed tempus, diam id iaculis lacinia, diam enim ornare lacus, et fringilla sapien ipsum id nisl. Nullam nec sagittis risus. Proin iaculis neque vitae purus commodo, eget consequat ligula malesuada. Curabitur fringilla non nisl at elementum. Pellentesque id interdum urna. Proin viverra id nulla sed luctus. Nullam eget pharetra velit, eu pharetra metus. Sed venenatis feugiat leo, sed convallis ex consequat in. Vestibulum porttitor ullamcorper erat eu venenatis. Ut porttitor ut tortor ut pharetra.

Etiam nisi velit, ultricies quis nunc a, venenatis interdum odio. Cras a facilisis justo. Duis non porttitor massa. Vivamus hendrerit lectus sit amet libero auctor maximus a vitae ipsum. Cras a volutpat sapien. Duis arcu leo, porttitor eget tempor quis, commodo non tellus. Interdum et malesuada fames ac ante ipsum primis in faucibus. Donec purus turpis, elementum et euismod quis, ultrices ut mauris. Cras eu urna tellus. Suspendisse hendrerit dui justo, ac posuere nibh efficitur eget. Ut sapien leo, pulvinar quis nibh et, commodo mollis arcu. Nullam efficitur ipsum nisi, eget sollicitudin metus rutrum id. Quisque sollicitudin tortor id vestibulum lacinia.

Nam quis posuere velit. Sed tincidunt ante sit amet tincidunt finibus. Curabitur sed mollis nibh, id vestibulum sem. Proin quis porta urna. Donec congue vitae massa eget euismod. Suspendisse tempus euismod mollis. Aenean maximus dolor non mollis dignissim. Sed tincidunt mi ut porttitor dapibus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.

Integer pretium augue nec arcu laoreet consectetur. In mattis, dolor a condimentum rutrum, ligula augue imperdiet urna, sodales euismod orci eros sit amet nisl. Quisque aliquet tincidunt massa, ac mollis urna sagittis id. Sed laoreet rutrum risus, id congue augue iaculis a. Phasellus vitae tortor varius, luctus velit ac, fringilla nisi. Nulla non pretium mauris. Integer at nulla quis metus porta fringilla sed quis mauris. Curabitur vehicula felis nec libero dapibus, ut pharetra libero egestas. Mauris nibh velit, dignissim eget aliquam sed, venenatis at lacus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin sed efficitur nulla. Maecenas vitae feugiat justo.</value>
  </data>
  <data name="LocalizationPage_Title" xml:space="preserve">
    <value>Localization</value>
  </data>
  <data name="MainThreadPage_BusyMessage" xml:space="preserve">
    <value>Doing work in background thread</value>
  </data>
  <data name="DependsOnPage_Title" xml:space="preserve">
    <value>DependsOn</value>
  </data>
  <data name="DependsOnPage_MainLabel" xml:space="preserve">
    <value>Writting on the TriggerText entry, will trigger an update the TargetText and the TargeDate</value>
  </data>
  <data name="ValidationPage_Tile" xml:space="preserve">
    <value>Validation</value>
  </data>
  <data name="ValidationPage_ComingSoon" xml:space="preserve">
    <value>Coming Soon...</value>
  </data>
  <data name="MenuItem_DependsOnLabel" xml:space="preserve">
    <value>DependsOn Sample</value>
  </data>
  <data name="MenuItem_LocalizationLabel" xml:space="preserve">
    <value>Localization Sample</value>
  </data>
  <data name="MenuItem_MainThreadLabel" xml:space="preserve">
    <value>MainThread Sample</value>
  </data>
  <data name="MenuItem_ValidationLabel" xml:space="preserve">
    <value>Validation Sample</value>
  </data>
  <data name="MainThreadPage_Message" xml:space="preserve">
    <value>Message coming from background thread and shown with MainThreadService</value>
  </data>
  <data name="MainThreadPage_ExecuteButtonLabel" xml:space="preserve">
    <value>Execute</value>
  </data>
</root>